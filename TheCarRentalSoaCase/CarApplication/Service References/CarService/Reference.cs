//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarApplication.CarService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Car", Namespace="http://schemas.datacontract.org/2004/07/CarManagmentInterface")]
    [System.SerializableAttribute()]
    public partial class Car : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LitersOfLuggageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxNumberOfPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfDoorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CarApplication.CarService.TransmissionTypeEnum TransmissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BrandName {
            get {
                return this.BrandNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandNameField, value) != true)) {
                    this.BrandNameField = value;
                    this.RaisePropertyChanged("BrandName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LitersOfLuggage {
            get {
                return this.LitersOfLuggageField;
            }
            set {
                if ((this.LitersOfLuggageField.Equals(value) != true)) {
                    this.LitersOfLuggageField = value;
                    this.RaisePropertyChanged("LitersOfLuggage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxNumberOfPerson {
            get {
                return this.MaxNumberOfPersonField;
            }
            set {
                if ((this.MaxNumberOfPersonField.Equals(value) != true)) {
                    this.MaxNumberOfPersonField = value;
                    this.RaisePropertyChanged("MaxNumberOfPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfDoors {
            get {
                return this.NumberOfDoorsField;
            }
            set {
                if ((this.NumberOfDoorsField.Equals(value) != true)) {
                    this.NumberOfDoorsField = value;
                    this.RaisePropertyChanged("NumberOfDoors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfPerson {
            get {
                return this.NumberOfPersonField;
            }
            set {
                if ((this.NumberOfPersonField.Equals(value) != true)) {
                    this.NumberOfPersonField = value;
                    this.RaisePropertyChanged("NumberOfPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CarApplication.CarService.TransmissionTypeEnum Transmission {
            get {
                return this.TransmissionField;
            }
            set {
                if ((this.TransmissionField.Equals(value) != true)) {
                    this.TransmissionField = value;
                    this.RaisePropertyChanged("Transmission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransmissionTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/CarManagmentInterface")]
    public enum TransmissionTypeEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Automatic = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CarService.ICarManagement")]
    public interface ICarManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/InsertNewcar", ReplyAction="http://tempuri.org/ICarManagement/InsertNewcarResponse")]
        int InsertNewcar(CarApplication.CarService.Car car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/InsertNewcar", ReplyAction="http://tempuri.org/ICarManagement/InsertNewcarResponse")]
        System.Threading.Tasks.Task<int> InsertNewcarAsync(CarApplication.CarService.Car car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/RemoveCar", ReplyAction="http://tempuri.org/ICarManagement/RemoveCarResponse")]
        bool RemoveCar(CarApplication.CarService.Car car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/RemoveCar", ReplyAction="http://tempuri.org/ICarManagement/RemoveCarResponse")]
        System.Threading.Tasks.Task<bool> RemoveCarAsync(CarApplication.CarService.Car car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/UpdateMillage", ReplyAction="http://tempuri.org/ICarManagement/UpdateMillageResponse")]
        void UpdateMillage(CarApplication.CarService.Car car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/UpdateMillage", ReplyAction="http://tempuri.org/ICarManagement/UpdateMillageResponse")]
        System.Threading.Tasks.Task UpdateMillageAsync(CarApplication.CarService.Car car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/ListCars", ReplyAction="http://tempuri.org/ICarManagement/ListCarsResponse")]
        System.Collections.Generic.List<CarApplication.CarService.Car> ListCars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/ListCars", ReplyAction="http://tempuri.org/ICarManagement/ListCarsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<CarApplication.CarService.Car>> ListCarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/GetCarPicture", ReplyAction="http://tempuri.org/ICarManagement/GetCarPictureResponse")]
        byte[] GetCarPicture(string carID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarManagement/GetCarPicture", ReplyAction="http://tempuri.org/ICarManagement/GetCarPictureResponse")]
        System.Threading.Tasks.Task<byte[]> GetCarPictureAsync(string carID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICarManagementChannel : CarApplication.CarService.ICarManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CarManagementClient : System.ServiceModel.ClientBase<CarApplication.CarService.ICarManagement>, CarApplication.CarService.ICarManagement {
        
        public CarManagementClient() {
        }
        
        public CarManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CarManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int InsertNewcar(CarApplication.CarService.Car car) {
            return base.Channel.InsertNewcar(car);
        }
        
        public System.Threading.Tasks.Task<int> InsertNewcarAsync(CarApplication.CarService.Car car) {
            return base.Channel.InsertNewcarAsync(car);
        }
        
        public bool RemoveCar(CarApplication.CarService.Car car) {
            return base.Channel.RemoveCar(car);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCarAsync(CarApplication.CarService.Car car) {
            return base.Channel.RemoveCarAsync(car);
        }
        
        public void UpdateMillage(CarApplication.CarService.Car car) {
            base.Channel.UpdateMillage(car);
        }
        
        public System.Threading.Tasks.Task UpdateMillageAsync(CarApplication.CarService.Car car) {
            return base.Channel.UpdateMillageAsync(car);
        }
        
        public System.Collections.Generic.List<CarApplication.CarService.Car> ListCars() {
            return base.Channel.ListCars();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<CarApplication.CarService.Car>> ListCarsAsync() {
            return base.Channel.ListCarsAsync();
        }
        
        public byte[] GetCarPicture(string carID) {
            return base.Channel.GetCarPicture(carID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetCarPictureAsync(string carID) {
            return base.Channel.GetCarPictureAsync(carID);
        }
    }
}
